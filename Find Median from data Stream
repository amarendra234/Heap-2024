class MedianFinder {
public:
    priority_queue<int>pq_max;  // max prority queue
    priority_queue<int,vector<int>,greater<int>>pq_min;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(pq_max.empty() or num<pq_max.top()){
            pq_max.push(num);
        }else{
            pq_min.push(num);
        }
        if(pq_max.size()>pq_min.size()+1){
            pq_min.push(pq_max.top());
            pq_max.pop();
        }else if(pq_min.size()>pq_max.size()){
            pq_max.push(pq_min.top());
            pq_min.pop();
        }
    }
    
    double findMedian() {
        double ans;
        double val=1;
         if(pq_max.size()==pq_min.size()){
            ans=(pq_max.top()+pq_min.top())/2.0;
         }else{
            ans=pq_max.top()*1.0;
         }
        return ans;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
